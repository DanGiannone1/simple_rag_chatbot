Here is my codebase:

<File: backend/app.py>
from flask import Flask, request, jsonify, Response, send_from_directory
import google.generativeai as genai
import os
from dotenv import load_dotenv
from flask_cors import CORS
import json
import re

from document_processor import get_context

# Load environment variables
load_dotenv()

app = Flask(__name__, static_folder='static')
CORS(app)  # Enable CORS for all routes

# Initialize Gemini with API key
genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))

# Initialize the model
model = genai.GenerativeModel('gemini-2.0-flash-exp')

# Serve static files
@app.route('/')
def serve_index():
    return send_from_directory(app.static_folder, 'index.html')

@app.route('/<path:path>')
def serve_static(path):
    return send_from_directory(app.static_folder, path)

# ------------------------------------------------------------------------------------
# Optional: Remove or comment out the /process-docs endpoint if it's no longer needed
# ------------------------------------------------------------------------------------
# @app.route('/process-docs', methods=['POST'])
# def process_documents():
#     # No longer needed
#     return jsonify({'message': 'Not used anymore'})

def extract_references(text: str):
    """
    Look for a pattern like:
      [REFERENCES: { "files": ["some_file.pdf", "some_file.txt"] }]
    Return a list of citation objects with shape:
      [{ "id": 1, "source": "some_file.pdf", "page": null, "content": "" }, ... ]
    """
    pattern = r'\[REFERENCES:\s*(\{.*?\})\s*\]'
    match = re.search(pattern, text, re.DOTALL)
    if match:
        try:
            references_str = match.group(1)
            references_data = json.loads(references_str)
            file_names = references_data.get('files', [])
            # Convert file names into an array of citation dicts
            citations = []
            for idx, f in enumerate(file_names, start=1):
                citations.append({
                    'id': idx,
                    'source': f,
                    'page': None,
                    'content': ''
                })
            return citations
        except Exception as e:
            print(f"Error parsing references: {e}")
            return []
    return []

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        user_message = data.get('message')
        print(f"\nUser message: {user_message}")

        if not user_message:
            return jsonify({'error': 'No message provided'}), 400

        # Read all files from the data folder
        context = get_context()

        print("\nFinal context being passed to model:")
        print("=" * 80)
        print(context)
        print("=" * 80)

        def generate():
            """
            Stream the response from the model as server-sent events (SSE).
            We accumulate the text so we can parse out the references JSON block at the end.
            """
            prompt = f"""You are a helpful assistant that provides information based on the given context. Say "I'm sorry I can't help with that" if the answer isn't found in the context. 

            The context is provided with XML-style tags indicating the source file. For example:
            <example.txt>
            This is the content of example.txt
            </example.txt>

            Cite your sources by [1], [2], [3], etc. At the end of your response, include a references section in this exact format:

            References:
            [REFERENCES: {{ "files": ["source1.txt", "source2.pdf"] }}]

            Do not include any other text or formatting in your response besides:
            1. Your answer with citations
            2. The word "References:" on a new line
            3. The [REFERENCES] JSON block
            4. IMPORTANT: Only include files in the references that were actually used in the answer. Cite a source as [1] even if it was the third source you looked at. 

            Context:
            {context}

            User Question:
            {user_message}"""

            response = model.generate_content(prompt, stream=True)

            accumulated_text = ""
            for chunk in response:
                if chunk.text:
                    # Clean up any extra newlines or spaces around the references block
                    text = chunk.text
                    accumulated_text += text
                    data_chunk = json.dumps({'chunk': text})
                    yield f"data: {data_chunk}\n\n"

            # Once the stream ends, parse out the references
            references = extract_references(accumulated_text)
            if references:
                data_citations = json.dumps({'citations': references})
                yield f"data: {data_citations}\n\n"

            # Signal end of SSE
            yield "data: [DONE]\n\n"

        return Response(generate(), mimetype='text/event-stream')

    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)

--------------------------------------------------------------------------------
<File: backend/document_processor.py>
import os
from langchain.document_loaders import PyPDFLoader
import pypdf

def get_context():
    """
    Reads all files in ../data/source_files.
    If a file is PDF, we extract its text using PyPDFLoader.
    Otherwise, we read it as plain text.
    Returns a single string with the contents of all files, each prefixed with its filename.
    """
    directory = "../data/source_files"
    all_text = []

    if not os.path.exists(directory):
        print(f"Warning: Directory {directory} does not exist.")
        return ""

    for filename in os.listdir(directory):
        file_path = os.path.join(directory, filename)

        if not os.path.isfile(file_path):
            continue

        # If it's a PDF, extract the text
        if filename.lower().endswith(".pdf"):
            try:
                loader = PyPDFLoader(file_path)
                docs = loader.load()  # Each doc represents one page
                pdf_content = []
                for i, doc in enumerate(docs, 1):
                    pdf_content.append(f"[Page {i}]: {doc.page_content}")
                all_text.append(f"<{filename}>\n" + "\n".join(pdf_content) + "\n</{filename}>")
            except Exception as e:
                print(f"Error reading PDF {filename}: {e}")
        else:
            # Otherwise, treat it as a plain text file
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
                    all_text.append(f"<{filename}>\n{content}\n</{filename}>")
            except Exception as e:
                print(f"Error reading file {filename}: {e}")

    return "\n\n".join(all_text)

--------------------------------------------------------------------------------
<File: backend/requirements.txt>
flask
python-dotenv
google-generativeai
flask-cors
pypdf
langchain
tiktoken
langchain-community
langchain-google-genai


--------------------------------------------------------------------------------
<File: frontend/package.json>
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@mantine/core": "^7.15.2",
    "@mantine/hooks": "^7.15.2",
    "@tabler/icons-react": "^3.26.0",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@types/uuid": "^10.0.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-markdown": "^8.0.7",
    "react-syntax-highlighter": "^15.6.1",
    "remark-gfm": "^4.0.0",
    "uuid": "^11.0.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}

--------------------------------------------------------------------------------
<File: frontend/README.md>
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

--------------------------------------------------------------------------------
<File: frontend/src/App.css>
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

--------------------------------------------------------------------------------
<File: frontend/src/App.tsx>
import { MantineProvider, AppShell, Container } from '@mantine/core';
import { ChatInterface } from './components2/chat/ChatInterface';
import '@mantine/core/styles.css';

function App() {
  return (
    <MantineProvider defaultColorScheme="dark">
      <AppShell
        style={{
          backgroundColor: 'var(--app-bg)',
          minHeight: '100vh',
        }}
      >
        <Container 
          size="md" 
          h="100vh" 
          p="md" 
          style={{ 
            display: 'flex',
            flexDirection: 'column',
          }}
        >
          <ChatInterface />
        </Container>
      </AppShell>
    </MantineProvider>
  );
}

export default App;

--------------------------------------------------------------------------------
<File: frontend/src/components2/chat/ChatInterface.tsx>
import { Stack, TextInput, ActionIcon, Paper, ScrollArea, Title } from '@mantine/core';
import { IconSend } from '@tabler/icons-react';
import { useState,  } from 'react';
import { useChat } from './hooks/useChat';
import { MessageBubble } from './ui/MessageBubble';
import { EmptyState } from './ui/EmptyState';

export function ChatInterface() {
  const { messages, isStreaming, sendMessage } = useChat();
  const [input, setInput] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isStreaming) return;

    const message = input.trim();
    setInput('');
    await sendMessage(message);
  };

  return (
    <Paper
      style={{
        height: '100%',
        backgroundColor: 'var(--container-bg)',
        border: '1px solid var(--border-color)',
        display: 'flex',
        flexDirection: 'column',
        overflow: 'hidden',
      }}
      radius="lg"
      shadow="md"
    >
      <Title
        order={2}
        ta="center"
        py="sm"
        style={{
          borderBottom: '1px solid var(--border-color)',
          backgroundColor: 'var(--header-bg)',
          color: 'var(--text-bright)',
        }}
      >
        Reminder Media Chatbot
      </Title>

      <ScrollArea 
        flex={1}
        type="hover"
        offsetScrollbars
        scrollbarSize={8}
        style={{ backgroundColor: 'var(--chat-bg)', width: '100%' }}
      >
        <Stack gap="md" p="md" style={{ width: '100%' }}>
          {messages.length === 0 ? (
            <EmptyState />
          ) : (
            messages.map(message => (
              <MessageBubble 
                key={message.id} 
                message={message} 
              />
            ))
          )}
        </Stack>
      </ScrollArea>

      <Paper 
        p="md" 
        style={{ 
          borderTop: '1px solid var(--border-color)',
          backgroundColor: 'var(--input-bg)',
        }}
      >
        <form onSubmit={handleSubmit}>
          <TextInput
            placeholder="Type your message..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            disabled={isStreaming}
            size="lg"
            radius="xl"
            styles={{
              input: {
                backgroundColor: 'var(--container-bg)',
                border: '1px solid var(--border-color)',
                '&:focus': {
                  borderColor: 'var(--mantine-color-blue-filled)',
                },
                fontSize: '1rem',
                padding: '1.2rem',
                height: 'auto',
                paddingRight: '3.5rem',
                color: 'var(--text-bright)',
                '&::placeholder': {
                  color: 'var(--text-secondary)',
                }
              }
            }}
            rightSection={
              <ActionIcon 
                size="lg"
                radius="xl"
                color="blue"
                variant="subtle"
                type="submit"
                disabled={!input.trim() || isStreaming}
                style={{ 
                  backgroundColor: input.trim() ? 'var(--mantine-color-blue-filled)' : 'transparent',
                  color: input.trim() ? 'white' : 'var(--mantine-color-blue-filled)',
                  transition: 'all 0.2s ease',
                  '&:hover': {
                    backgroundColor: input.trim() ? 'var(--mantine-color-blue-filled-hover)' : 'var(--mantine-color-blue-light)',
                  }
                }}
              >
                <IconSend style={{ width: '1.2rem', height: '1.2rem' }} />
              </ActionIcon>
            }
          />
        </form>
      </Paper>
    </Paper>
  );
} 
--------------------------------------------------------------------------------
<File: frontend/src/components2/chat/hooks/useChat.ts>
import { useState, useCallback } from 'react';
import { Message, StreamChunk, Citation } from '../types';
import { v4 as uuidv4 } from 'uuid';

export function useChat() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isStreaming, setIsStreaming] = useState(false);
  const [currentStreamId, setCurrentStreamId] = useState<string | null>(null);

  const handleStream = useCallback(async (userMessage: string) => {
    if (isStreaming) return;

    // Add user message
    const userMessageObj: Message = {
      id: uuidv4(),
      text: userMessage,
      isBot: false,
      timestamp: new Date(),
    };
    setMessages(prev => [...prev, userMessageObj]);

    // Create placeholder for bot message
    const botMessageId = uuidv4();
    const botMessage: Message = {
      id: botMessageId,
      text: '',
      isBot: true,
      timestamp: new Date(),
      isComplete: false,
    };
    setMessages(prev => [...prev, botMessage]);
    setCurrentStreamId(botMessageId);
    setIsStreaming(true);

    try {
      const response = await fetch('/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: userMessage }),
      });

      if (!response.ok) throw new Error('Failed to get response');

      const reader = response.body?.getReader();
      if (!reader) throw new Error('No reader available');

      let citations: Citation[] = [];
      let accumulatedText = '';

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        // Process the chunks
        const chunk = new TextDecoder().decode(value);
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (!line.startsWith('data: ')) continue;
          if (line.includes('[DONE]')) {
            setMessages(prev => prev.map(msg => 
              msg.id === botMessageId ? { ...msg, isComplete: true } : msg
            ));
            setIsStreaming(false);
            setCurrentStreamId(null);
            break;
          }

          try {
            const data: StreamChunk = JSON.parse(line.slice(5));
            
            if (data.citations) {
              citations = data.citations;
              setMessages(prev => prev.map(msg => 
                msg.id === botMessageId ? { ...msg, citations } : msg
              ));
            }

            if (data.chunk) {
              accumulatedText += data.chunk;
              setMessages(prev => prev.map(msg => 
                msg.id === botMessageId ? { ...msg, text: accumulatedText } : msg
              ));
            }
          } catch (e) {
            console.error('Failed to parse chunk:', e);
          }
        }
      }
    } catch (error) {
      console.error('Chat error:', error);
      setMessages(prev => prev.map(msg => 
        msg.id === botMessageId ? { 
          ...msg, 
          text: 'Error: Failed to get response', 
          isComplete: true 
        } : msg
      ));
    } finally {
      setIsStreaming(false);
      setCurrentStreamId(null);
    }
  }, [isStreaming]);

  return {
    messages,
    isStreaming,
    currentStreamId,
    sendMessage: handleStream,
  };
} 
--------------------------------------------------------------------------------
<File: frontend/src/components2/chat/types.ts>
export interface Citation {
  id: number;
  source: string;
  page: number;
  content: string;
}

export interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
  citations?: Citation[];
  isComplete?: boolean;  // Indicates if streaming is complete
}

export interface StreamChunk {
  citations?: Citation[];
  chunk?: string;
}

// State for managing message streaming
export interface MessageStreamState {
  isStreaming: boolean;
  accumulatedText: string;
  citations: Citation[];
} 
--------------------------------------------------------------------------------
<File: frontend/src/components2/chat/ui/EmptyState.tsx>
import { Box, Text } from '@mantine/core';
import { IconRobot } from '@tabler/icons-react';

export function EmptyState() {
  return (
    <Box 
      style={{ 
        textAlign: 'center', 
        padding: '4rem 1rem',
        color: 'var(--text-secondary)',
      }}
    >
      <IconRobot size={48} style={{ marginBottom: '1rem', opacity: 0.5 }} />
      <Text size="lg">Start a conversation...</Text>
      <Text size="sm" c="dimmed">Type a message below to begin</Text>
    </Box>
  );
} 
--------------------------------------------------------------------------------
<File: frontend/src/components2/chat/ui/MessageBubble.tsx>
import { Paper, Group, Text, Stack } from '@mantine/core';
import { IconRobot, IconUser } from '@tabler/icons-react';
import { Message } from '../types';
import { MessageContent } from './MessageContent';

interface MessageBubbleProps {
  message: Message;
}

export function MessageBubble({ message }: MessageBubbleProps) {
  const isBot = message.isBot;

  return (
    <Stack 
      gap={4}
      align={isBot ? "flex-start" : "flex-end"}
      style={{ 
        padding: '0.5rem 1rem',
        maxWidth: '85%',
        alignSelf: isBot ? 'flex-start' : 'flex-end',
      }}
    >
      <Group 
        align="flex-start" 
        style={{ 
          backgroundColor: isBot ? 'var(--message-bot-bg)' : undefined,
          borderRadius: '8px',
          gap: isBot ? '1rem' : '0.5rem',
          flexDirection: isBot ? 'row' : 'row-reverse',
        }}
      >
        {/* Avatar */}
        <div style={{
          width: '2.5rem',
          height: '2.5rem',
          borderRadius: '50%',
          backgroundColor: isBot ? 'var(--icon-bg)' : 'var(--message-user-bg)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexShrink: 0,
        }}>
          {isBot ? (
            <IconRobot 
              style={{ 
                width: 'calc(1.5rem * var(--mantine-scale))', 
                height: 'calc(1.5rem * var(--mantine-scale))',
                color: 'var(--mantine-color-blue-filled)',
              }} 
            />
          ) : (
            <IconUser 
              style={{ 
                width: 'calc(1.5rem * var(--mantine-scale))', 
                height: 'calc(1.5rem * var(--mantine-scale))',
                color: 'white',
              }} 
            />
          )}
        </div>

        {/* Message Content */}
        <Paper 
          shadow="sm"
          p="lg" 
          style={{ 
            flex: 1,
            backgroundColor: isBot ? 'var(--container-bg)' : 'var(--message-user-bg)',
            color: isBot ? 'var(--text-bright)' : 'white',
            border: isBot ? '1px solid var(--border-color)' : 'none',
          }}
          radius="md"
        >
          <MessageContent message={message} />
        </Paper>
      </Group>

      {/* Timestamp */}
      <Text 
        size="xs" 
        c="dimmed"
        style={{
          marginLeft: isBot ? '3.5rem' : '0',
          marginRight: isBot ? '0' : '3.5rem',
        }}
      >
        {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
      </Text>
    </Stack>
  );
} 
--------------------------------------------------------------------------------
<File: frontend/src/components2/chat/ui/MessageContent.tsx>
// ----------------------------------------------------
// File: frontend/src/components2/chat/ui/MessageContent.tsx
// ----------------------------------------------------
import { useMemo } from 'react';
import { Box, Divider, Text, List } from '@mantine/core';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { Message } from '../types';
import { CodeProps } from 'react-markdown/lib/ast-to-react';

/**
 * Finds a "References:" line plus a [REFERENCES: {...}] JSON block at the end
 * of the text, and separates it out. Returns:
 *   - answer: text before the references
 *   - referencesRaw: the raw "[REFERENCES: { ... }]" string (if found)
 */
function parseReferences(text: string): { answer: string; referencesRaw: string } {
  // Regex looks for:
  //   "References:" plus optional whitespace, then
  //   the [REFERENCES: {...}] block at the very end of the message
  const pattern = /References:\s*(?<block>\[REFERENCES:\s*\{[\s\S]*?\}\])\s*$/i;
  const match = text.match(pattern);

  if (!match?.groups?.block) {
    return { answer: text.trim(), referencesRaw: '' };
  }

  // The raw references block: "[REFERENCES: {...}]"
  const referencesRaw = match.groups.block.trim();
  // The answer is everything up to the start of the references block
  const answer = text.slice(0, match.index).trim();

  return { answer, referencesRaw };
}

/**
 * Given a raw references string like "[REFERENCES: { "files": ["doc1.pdf"] }]",
 * parse out the JSON inside of it, and return the file list with citation numbers.
 * If parsing fails, we return an empty array.
 */
function extractFilesFromReferences(raw: string): Array<{number: number; file: string}> {
  // Look for the JSON between [REFERENCES: and the final ]
  const jsonPattern = /\[REFERENCES:\s*(\{.*\})\]/s;
  const jsonMatch = raw.match(jsonPattern);
  if (!jsonMatch) return [];

  try {
    const obj = JSON.parse(jsonMatch[1]);
    const files = obj.files || [];
    if (Array.isArray(files)) {
      return files.map((file, index) => ({
        number: index + 1,
        file
      }));
    }
    return [];
  } catch (err) {
    console.error('Failed to parse references JSON:', err);
    return [];
  }
}

interface MessageContentProps {
  message: Message;
}

export function MessageContent({ message }: MessageContentProps) {
  // Avoid undefined text
  const rawText = message.text ?? '';

  // Split out the references from the text
  const { answer, referencesRaw } = useMemo(
    () => parseReferences(rawText),
    [rawText]
  );

  // Parse the [REFERENCES: ... ] block to get the list of files
  const files = useMemo(() => extractFilesFromReferences(referencesRaw), [referencesRaw]);

  // Common code-block renderer for ReactMarkdown
  const codeRenderer = ({
    inline,
    className,
    children,
    ...props
  }: CodeProps) => {
    const match = /language-(\w+)/.exec(className || '');
    if (!inline && match) {
      return (
        <SyntaxHighlighter
          style={oneDark as any}
          language={match[1]}
          PreTag="div"
          showLineNumbers
          {...props}
        >
          {String(children).replace(/\n$/, '')}
        </SyntaxHighlighter>
      );
    }
    return (
      <code className={className} {...props}>
        {children}
      </code>
    );
  };

  return (
    <Box
      style={{
        whiteSpace: 'pre-wrap',
        lineHeight: 1.6,
      }}
    >
      {/* Main answer content */}
      <ReactMarkdown remarkPlugins={[remarkGfm]} components={{ code: codeRenderer }}>
        {answer}
      </ReactMarkdown>

      {/* Only show "References" if we found a references block */}
      {referencesRaw && files.length > 0 && (
        <>
          <Divider my="md" variant="dashed" />
          <Text fw="bold" mb="xs">
            References
          </Text>
          <List size="sm" spacing="xs" listStyleType="none" ml={0}>
            {files.map(({number, file}) => (
              <List.Item key={number}>[{number}] {file}</List.Item>
            ))}
          </List>
        </>
      )}
    </Box>
  );
}

--------------------------------------------------------------------------------
<File: frontend/src/index.css>
@import '@mantine/core/styles.css';

:root {
  /* Base colors */
  --app-bg: #f8f9fa;
  --container-bg: #ffffff;
  --header-bg: #f1f3f5;
  --chat-bg: #f8f9fa;
  --input-bg: #ffffff;
  --border-color: #e9ecef;
  
  /* Message colors */
  --message-bot-bg: #f8f9fa;
  --message-user-bg: #228BE6;
  --icon-bg: rgba(76, 110, 245, 0.1);
  
  /* Text colors */
  --text-bright: #1a1b1e;
  --text-primary: #C1C2C5;
  --text-secondary: #868e96;

  /* Input colors */
  --input-text: #FFFFFF;
  --input-placeholder: #909296;
  --input-border-focus: #228BE6;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  height: 100vh;
  width: 100%;
  background-color: var(--app-bg);
  color: var(--text-primary);
}

#root {
  height: 100vh;
  display: flex;
  flex-direction: column;
}

/* Input placeholder styling */
input::placeholder {
  color: var(--input-placeholder) !important;
  opacity: 0.7;
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--text-secondary);
}

@keyframes bounce {
  0%, 60%, 100% {
    transform: translateY(0);
  }
  30% {
    transform: translateY(-4px);
  }
}

/* Dark theme overrides */
[data-mantine-color-scheme="dark"] {
  --app-bg: #1a1b1e;
  --container-bg: #25262b;
  --border-color: #373a40;
  --text-bright: #ffffff;
  --text-secondary: #909296;
  --header-bg: #25262b;
  --chat-bg: #1a1b1e;
  --input-bg: #25262b;
  --message-bot-bg: #25262b;
}

--------------------------------------------------------------------------------
<File: frontend/src/main.tsx>
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

--------------------------------------------------------------------------------
<File: frontend/src/vite-env.d.ts>
/// <reference types="vite/client" />

--------------------------------------------------------------------------------
<File: frontend/tsconfig.app.json>
{
  "compilerOptions": {
    "incremental": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

--------------------------------------------------------------------------------
<File: frontend/tsconfig.json>
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

--------------------------------------------------------------------------------
<File: frontend/tsconfig.node.json>
{
  "compilerOptions": {
    "incremental": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

--------------------------------------------------------------------------------
<File: README.md>
# Simple RAG Chatbot

A modern, responsive chatbot application that uses Retrieval-Augmented Generation (RAG) to provide accurate, context-aware responses based on your PDF documents. Built with Google's Gemini AI, ChromaDB, and a React + Flask stack.

![Application Screenshot](images/main_ui.png)


## Features

- 📄 PDF Document Processing: Upload and process PDF documents for contextual information
- 🔍 Smart Retrieval: Uses ChromaDB vector store for efficient semantic search
- 🤖 Advanced AI Responses: Powered by Google's Gemini AI model
- 💬 Real-time Chat Interface: Modern React-based UI with streaming responses
- 📚 Source Citations: Automatic citation of sources with page numbers
- 🎯 Context-Aware: Responses are based on your document content

## Architecture

### Backend Components

- **Flask Server**: REST API handling document processing and chat endpoints
- **Document Processor**: Manages PDF processing and vector storage
- **Gemini AI**: Google's latest LLM for generating responses
- **ChromaDB**: Vector database for efficient semantic search
- **LangChain**: Framework for connecting various components

### Frontend Components

- **React + TypeScript**: Modern frontend framework
- **Real-time Updates**: Server-Sent Events for streaming responses
- **Responsive Design**: Modern UI that works on all devices

## Setup Instructions

### Prerequisites

- Python 3.8+
- Node.js 16+
- Google Cloud API key with Gemini API access
- C++ Build Tools (Required for some Python packages)
  - **Windows**: Install "Desktop development with C++" workload from Visual Studio Build Tools
  - **Linux**: `sudo apt-get install build-essential`
  - **macOS**: Install Xcode Command Line Tools: `xcode-select --install`

### Backend Setup

1. Create a Python virtual environment:
   
   **Command Line:**
   ```bash
   python -m venv .venv
   ```
   
   **VS Code:**
   - Press `Ctrl+Shift+P` (Windows) or `Cmd+Shift+P` (Mac)
   - Type "Python: Create Environment"
   - Select "Venv"
   - Choose your Python interpreter

2. Activate the virtual environment:
   - Windows:
     ```powershell
     .\.venv\Scripts\activate
     ```
   - Unix/MacOS:
     ```bash
     source .venv/bin/activate
     ```

3. Install Python dependencies:
   ```bash
   cd backend
   pip install -r requirements.txt
   ```

4. Create a `.env` file in the backend directory (or rename example.env to .env and fill in your API key):
   ```
   GOOGLE_API_KEY=your_google_api_key_here
   ```

### Frontend Setup

1. Install Node.js dependencies and build the application:
   ```bash
   cd frontend
   npm install
   npm run build
   ```

### Data Setup

1. Create a data directory structure:
   ```
   data/
   ├── source_files/    # Place your PDF files here
   └── vector_db/       # Will store the vector embeddings
   ```

2. Place your PDF documents in the `data/source_files` directory

3. Index your documents:
   ```bash
   cd backend
   python document_processor.py
   ```

### Running the Application

1. Start the application using the provided script:
   ```bash
   cd backend
   ./start.ps1
   ```
   This script will handle both the backend server startup and serve the built frontend.

2. Open your browser and navigate to `http://localhost:5000`

## Usage

1. Place your PDF documents in the `data/source_files` directory
2. Process the documents using the UI or API endpoint
3. Start chatting! Ask questions about your documents
4. The system will provide responses with citations to specific pages in your documents

## Project Structure

```
.
├── backend/
│   ├── app.py                 # Main Flask application
│   ├── document_processor.py  # PDF processing and vector storage
│   └── requirements.txt       # Python dependencies
├── frontend/
│   ├── src/
│   │   ├── components/       # React components
│   │   └── App.tsx          # Main React application
│   └── package.json         # Node.js dependencies
└── data/
    ├── source_files/        # PDF documents
    └── vector_db/          # ChromaDB storage
```

## Contributing

Feel free to submit issues and enhancement requests!

## License

[Add your chosen license here]
--------------------------------------------------------------------------------

<end codebase> 

